package main

import (
	"fmt"
	"io"
	"os"
	"strconv"
	"strings"
)

func concatIfNotEmpty(str string, add string) string {
	if str != "" {
		return str + add
	}
	return str
}

func generateServerConfig(state *state, w io.Writer) error {
	PostUp := ""
	PostDown := ""

	wd, err := os.Getwd()
	if err != nil {
		panic("can't os.Getwd " + err.Error())
	}
	comment := "# This file is generated by wg-dir-conf from directory " + wd
	comment += "\n# It it likely to be overwritten.\n"

	_, err = fmt.Fprintf(w, "%s\n[Interface]\n", comment)
	if err != nil {
		return fmt.Errorf("generateServerConfig error %w", err)
	}
	if state.server.Address4 != "" {
		_, _ = fmt.Fprintln(w, "Address =", state.server.Address4)
		PostUp = strings.TrimRight(state.server.PostUp4, " ;")
		PostDown = strings.TrimRight(state.server.PostDown4, "; ")
	}
	if state.server.Address6 != "" {
		_, _ = fmt.Fprintln(w, "Address =", state.server.Address6)
		PostUp = concatIfNotEmpty(PostUp, "; ")
		PostDown = concatIfNotEmpty(PostDown, "; ")

		PostUp = PostUp + state.server.PostUp6
		PostDown = PostDown + state.server.PostDown6
	}
	_, _ = fmt.Fprintln(w, "PostUp =", PostUp)
	_, _ = fmt.Fprintln(w, "PostDown =", PostDown)
	_, _ = fmt.Fprintln(w, "ListenPort =", state.server.ListenPort)
	_, _ = fmt.Fprintln(w, "PrivateKey =", state.server.PrivateKey)

	for _, client := range state.clients {
		err = generateServerPeerConfig(state.server, client, w)
		if err != nil {
			return fmt.Errorf("generateServerConfig error %w", err)
		}
	}

	return nil
}

func generateServerPeerConfig(srv *server, client *client, w io.Writer) error {
	_, err := fmt.Fprintf(w, "\n# peer %s\n", client.name)
	if err != nil {
		return fmt.Errorf("generateServerConfig error %w", err)
	}
	_, _ = fmt.Fprintln(w, "[Peer]")
	if srv.PresharedKey != "" {
		_, _ = fmt.Fprintln(w, "PresharedKey =", srv.PresharedKey)
	}
	_, _ = fmt.Fprintln(w, "PublicKey =", client.PublicKey)
	_, _ = fmt.Fprintln(w, "AllowedIPs =", client.allowedIps(srv))

	return nil
}

func clientCommentLong(server *server, client *client) string {
	wd, err := os.Getwd()
	if err != nil {
		panic("can't os.Getwd " + err.Error())
	}

	comment := "# This file is generated by wg-dir-conf from directory " + wd + "\n"
	comment += "# file " + client.fileName + " on the server " + server.ServerHost
	return comment
}

func generateClientConfig(server *server, client *client, w io.Writer) error {
	_, err := fmt.Fprintf(w, "[Interface]\n")
	if err != nil {
		return fmt.Errorf("generateClientConfig error %w", err)
	}
	_, _ = fmt.Fprintln(w, "PrivateKey =", client.PrivateKey)
	_, _ = fmt.Fprintln(w, "Address =", client.allowedIps(server))

	if server.ClientDNS != "" {
		_, _ = fmt.Fprintln(w, "DNS =", server.ClientDNS)
	}

	_, _ = fmt.Fprintln(w, "\n[Peer]")
	if server.PresharedKey != "" {
		_, _ = fmt.Fprintln(w, "PresharedKey =", server.PresharedKey)
	}
	_, _ = fmt.Fprintln(w, "PublicKey =", server.PublicKey)
	_, _ = fmt.Fprintln(w, "AllowedIPs =", server.ClientRoute)
	_, _ = fmt.Fprintln(w, "Endpoint =", server.ServerHost+":"+strconv.Itoa(int(server.ListenPort)))

	if server.ClientPersistentKeepalive != 0 {
		_, _ = fmt.Fprintln(w, "PersistentKeepalive =", server.ClientPersistentKeepalive)
	}

	return nil
}
