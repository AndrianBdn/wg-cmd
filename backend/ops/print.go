package ops

import (
	"bytes"
	"fmt"
	"github.com/andrianbdn/wg-dir-conf/backend"
	"github.com/mdp/qrterminal/v3"
	"log"
	"os"
	"regexp"
	"strconv"
	"strings"
)

func OpPrint(arg string, qr bool, wlog *log.Logger) (string, error) {
	st, err := backend.ReadState(wlog)
	if err != nil {
		return "", err
	}
	c := clientTryNumber(arg, st)
	if c == nil {
		c = clientTryFileName(arg, st)
	}
	if c == nil {
		c = clientTryPeerName(arg, st)
	}

	if c == nil {
		return "", fmt.Errorf("could not find any client which looks like %s", arg)
	}

	buf := bytes.NewBuffer(nil)
	err = backend.GenerateClientConfig(st.Server, c, buf)
	if err != nil {
		return "", fmt.Errorf("generate client config %w", err)
	}

	if qr == false {
		return clientCommentLong(st.Server, c) + "\n" + buf.String(), nil
	}

	return qrCode(c.GetFileName(), buf.String()), nil

}

func clientCommentLong(server *backend.Server, client *backend.Client) string {
	wd, err := os.Getwd()
	if err != nil {
		panic("can't os.Getwd " + err.Error())
	}

	comment := "# This file is generated by wg-dir-conf from directory " + wd + "\n"
	comment += "# file " + client.GetFileName() + " on the server " + server.ServerHost
	return comment
}

func qrCode(fileName, configText string) string {
	buf := bytes.NewBuffer(nil)
	qrterminal.GenerateHalfBlock(configText, qrterminal.L, buf)
	return "WireGuard QR Code for " + fileName + ":\n" + buf.String()
}

func clientTryNumber(arg string, st *backend.State) *backend.Client {
	if !regexp.MustCompile(`^\d+$`).MatchString(arg) {
		return nil
	}
	ipNum, err := strconv.Atoi(arg)
	if err != nil {
		return nil
	}
	if ipNum < 2 {
		return nil // client IP Numbers start with 2
	}
	return st.Clients[ipNum]
}

func clientTryFileName(arg string, st *backend.State) *backend.Client {
	if !regexp.MustCompile(`^(\d+)-`).MatchString(arg) {
		return nil
	}
	if !strings.HasSuffix(arg, ".toml") {
		arg = arg + ".toml"
	}
	for _, c := range st.Clients {
		if c.GetFileName() == arg {
			return c
		}
	}
	return nil
}

func clientTryPeerName(arg string, st *backend.State) *backend.Client {
	if !regexp.MustCompile("^" + backend.PeerNameRegExp + "$").MatchString(arg) {
		return nil
	}
	for _, c := range st.Clients {
		if c.GetName() == arg {
			return c
		}
	}
	return nil
}
